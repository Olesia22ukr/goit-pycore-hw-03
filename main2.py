from datetime import datetime

def get_days_from_today(date):
    """
    –û–±—á–∏—Å–ª—é—î –∫—ñ–ª—å–∫—ñ—Å—Ç—å –¥–Ω—ñ–≤ –º—ñ–∂ –∑–∞–¥–∞–Ω–æ—é –¥–∞—Ç–æ—é —Ç–∞ —Å—å–æ–≥–æ–¥–Ω—ñ—à–Ω—ñ–º –¥–Ω–µ–º.
    
    :param date: –†—è–¥–æ–∫ —É —Ñ–æ—Ä–º–∞—Ç—ñ '–†–†–†–†-–ú–ú-–î–î'
    :return: –¶—ñ–ª–µ —á–∏—Å–ª–æ, —â–æ –ø–æ–∫–∞–∑—É—î —Ä—ñ–∑–Ω–∏—Ü—é —É –¥–Ω—è—Ö (–≤—ñ–¥'—î–º–Ω–µ, —è–∫—â–æ –¥–∞—Ç–∞ —É –º–∞–π–±—É—Ç–Ω—å–æ–º—É)
    """
    try:
        # –ö–æ–Ω–≤–µ—Ä—Ç—É—î–º–æ –≤—Ö—ñ–¥–Ω–∏–π —Ä—è–¥–æ–∫ —É –¥–∞—Ç—É
        input_date = datetime.strptime(date, "%Y-%m-%d").date()
        
        # –û—Ç—Ä–∏–º—É—î–º–æ –ø–æ—Ç–æ—á–Ω—É –¥–∞—Ç—É
        today_date = datetime.today().date()
        
        # –û–±—á–∏—Å–ª—é—î–º–æ —Ä—ñ–∑–Ω–∏—Ü—é —É –¥–Ω—è—Ö
        delta_days = (input_date - today_date).days
        
        return delta_days
    
    except ValueError:
        # –û–±—Ä–æ–±–∫–∞ –ø–æ–º–∏–ª–∫–∏ –Ω–µ–ø—Ä–∞–≤–∏–ª—å–Ω–æ–≥–æ —Ñ–æ—Ä–º–∞—Ç—É –¥–∞—Ç–∏
        return "–ü–æ–º–∏–ª–∫–∞: –ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω–∏–π —Ñ–æ—Ä–º–∞—Ç –¥–∞—Ç–∏. –í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É–π—Ç–µ '–†–†–†–†-–ú–ú-–î–î'!"

# üîπ –ü—Ä–∏–∫–ª–∞–¥–∏ –≤–∏–∫–ª–∏–∫—É —Ñ—É–Ω–∫—Ü—ñ—ó:
print(get_days_from_today("2025-03-12"))  # –ù–∞–ø—Ä–∏–∫–ª–∞–¥, -157 (—è–∫—â–æ —Å—å–æ–≥–æ–¥–Ω—ñ 5 —Ç—Ä–∞–≤–Ω—è 2021)
print(get_days_from_today("2027-01-01"))  # –í—ñ–¥'—î–º–Ω–µ —á–∏—Å–ª–æ, —è–∫—â–æ –¥–∞—Ç–∞ —É –º–∞–π–±—É—Ç–Ω—å–æ–º—É
print(get_days_from_today("lkj=gfd-poi")) # –ù–µ–∫–æ—Ä–µ–∫—Ç–Ω–∏–π —Ñ–æ—Ä–º–∞—Ç


#–∑–∞–≤–¥–∞–Ω–Ω—è 2
import random

def get_numbers_ticket(min, max, quantity):
    """
    –ì–µ–Ω–µ—Ä—É—î –≤—ñ–¥—Å–æ—Ä—Ç–æ–≤–∞–Ω–∏–π –Ω–∞–±—ñ—Ä —É–Ω—ñ–∫–∞–ª—å–Ω–∏—Ö –≤–∏–ø–∞–¥–∫–æ–≤–∏—Ö —á–∏—Å–µ–ª –¥–ª—è –ª–æ—Ç–µ—Ä–µ–π–Ω–æ–≥–æ –∫–≤–∏—Ç–∫–∞.

    :param min: –ú—ñ–Ω—ñ–º–∞–ª—å–Ω–µ –º–æ–∂–ª–∏–≤–µ —á–∏—Å–ª–æ (–Ω–µ –º–µ–Ω—à–µ 1)
    :param max: –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–µ –º–æ–∂–ª–∏–≤–µ —á–∏—Å–ª–æ (–Ω–µ –±—ñ–ª—å—à–µ 1000)
    :param quantity: –ö—ñ–ª—å–∫—ñ—Å—Ç—å —á–∏—Å–µ–ª —É –Ω–∞–±–æ—Ä—ñ
    :return: –í—ñ–¥—Å–æ—Ä—Ç–æ–≤–∞–Ω–∏–π —Å–ø–∏—Å–æ–∫ —É–Ω—ñ–∫–∞–ª—å–Ω–∏—Ö –≤–∏–ø–∞–¥–∫–æ–≤–∏—Ö —á–∏—Å–µ–ª –∞–±–æ –ø–æ—Ä–æ–∂–Ω—ñ–π —Å–ø–∏—Å–æ–∫, —è–∫—â–æ –ø–∞—Ä–∞–º–µ—Ç—Ä–∏ –Ω–µ–∫–æ—Ä–µ–∫—Ç–Ω—ñ
    """
    # –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ –∫–æ—Ä–µ–∫—Ç–Ω–æ—Å—Ç—ñ –ø–∞—Ä–∞–º–µ—Ç—Ä—ñ–≤
    if not (1 <= min <= max <= 1000) or not (min <= quantity <= max):
        return []

    # –ì–µ–Ω–µ—Ä—É—î–º–æ —É–Ω—ñ–∫–∞–ª—å–Ω—ñ –≤–∏–ø–∞–¥–∫–æ–≤—ñ —á–∏—Å–ª–∞
    numbers = random.sample(range(min, max + 1), quantity)

    # –°–æ—Ä—Ç—É—î–º–æ —á–∏—Å–ª–∞ —É –ø–æ—Ä—è–¥–∫—É –∑—Ä–æ—Å—Ç–∞–Ω–Ω—è
    return sorted(numbers)

# üîπ –ü—Ä–∏–∫–ª–∞–¥ –≤–∏–∫–æ—Ä–∏—Å—Ç–∞–Ω–Ω—è:
lottery_numbers = get_numbers_ticket(1, 49, 6)
print("–í–∞—à—ñ –ª–æ—Ç–µ—Ä–µ–π–Ω—ñ —á–∏—Å–ª–∞:", lottery_numbers)


 #–ó–∞–≤–¥–∞–Ω–Ω—è 3
import re

def normalize_phone(phone_number):
    """
    –ù–æ—Ä–º–∞–ª—ñ–∑—É—î –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω—É, –∑–∞–ª–∏—à–∞—é—á–∏ —Ç—ñ–ª—å–∫–∏ —Ü–∏—Ñ—Ä–∏ —Ç–∞ –∑–Ω–∞–∫ '+' –Ω–∞ –ø–æ—á–∞—Ç–∫—É.
    –Ø–∫—â–æ –Ω–æ–º–µ—Ä –Ω–µ –º–∞—î –º—ñ–∂–Ω–∞—Ä–æ–¥–Ω–æ–≥–æ –∫–æ–¥—É, –¥–æ–¥–∞—î—Ç—å—Å—è '+38' (–£–∫—Ä–∞—ó–Ω–∞).

    :param phone_number: –†—è–¥–æ–∫ –∑ —Ç–µ–ª–µ—Ñ–æ–Ω–Ω–∏–º –Ω–æ–º–µ—Ä–æ–º —É –±—É–¥—å-—è–∫–æ–º—É —Ñ–æ—Ä–º–∞—Ç—ñ
    :return: –ù–æ—Ä–º–∞–ª—ñ–∑–æ–≤–∞–Ω–∏–π —Ç–µ–ª–µ—Ñ–æ–Ω–Ω–∏–π –Ω–æ–º–µ—Ä
    """

    # –í–∏–¥–∞–ª—è—î–º–æ –≤—Å—ñ —Å–∏–º–≤–æ–ª–∏, –∫—Ä—ñ–º —Ü–∏—Ñ—Ä —Ç–∞ –∑–Ω–∞–∫–∞ '+'
    cleaned_number = re.sub(r"[^\d+]", "", phone_number)

    # –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ —Ñ–æ—Ä–º–∞—Ç —Ç–∞ –¥–æ–¥–∞—î–º–æ –Ω–µ–æ–±—Ö—ñ–¥–Ω–∏–π –∫–æ–¥
    if cleaned_number.startswith("+"):
        # –Ω–æ–º–µ—Ä —É–∂–µ –º–∞—î –º—ñ–∂–Ω–∞—Ä–æ–¥–Ω–∏–π –∫–æ–¥
        return cleaned_number
    elif cleaned_number.startswith("380"):
        # –¥–æ–¥–∞—î–º–æ —Ç—ñ–ª—å–∫–∏ –∑–Ω–∞–∫ '+'
        return "+" + cleaned_number
    else:
        # –¥–æ–¥–∞—î–º–æ –º—ñ–∂–Ω–∞—Ä–æ–¥–Ω–∏–π –∫–æ–¥ '+38'
        return "+38" + cleaned_number


# üîπ –ü—Ä–∏–∫–ª–∞–¥–∏ –≤–∏–∫–æ—Ä–∏—Å—Ç–∞–Ω–Ω—è:
test_numbers = [
    "    +38(050)123-32-34",
    "     0503451234",
    "(050)8889900",
    "38050-111-22-22",
    "38050 111 22 11   "
]

for number in test_numbers:
    normalized = normalize_phone(number)
    print(f"–û—Ä–∏–≥—ñ–Ω–∞–ª: {number}  ‚Üí  –ù–æ—Ä–º–∞–ª—ñ–∑–æ–≤–∞–Ω–∏–π: {normalized}")


#–ó–∞–≤–¥–∞–Ω–Ω—è 4
from datetime import datetime, timedelta

def get_upcoming_birthdays(users):
    """
    –í–∏–∑–Ω–∞—á–∞—î, –∫–æ–≥–æ –Ω–µ–æ–±—Ö—ñ–¥–Ω–æ –ø—Ä–∏–≤—ñ—Ç–∞—Ç–∏ –∑ –¥–Ω–µ–º –Ω–∞—Ä–æ–¥–∂–µ–Ω–Ω—è –ø—Ä–æ—Ç—è–≥–æ–º –Ω–∞—Å—Ç—É–ø–Ω–∏—Ö 7 –¥–Ω—ñ–≤.
    –Ø–∫—â–æ –¥–µ–Ω—å –Ω–∞—Ä–æ–¥–∂–µ–Ω–Ω—è –ø—Ä–∏–ø–∞–¥–∞—î –Ω–∞ –≤–∏—Ö—ñ–¥–Ω—ñ, –¥–∞—Ç–∞ –ø—Ä–∏–≤—ñ—Ç–∞–Ω–Ω—è –ø–µ—Ä–µ–Ω–æ—Å–∏—Ç—å—Å—è –Ω–∞ –ø–æ–Ω–µ–¥—ñ–ª–æ–∫.
    
    Args:
        users (list): –°–ø–∏—Å–æ–∫ —Å–ª–æ–≤–Ω–∏–∫—ñ–≤ –∑ —ñ–º–µ–Ω–µ–º (name) —Ç–∞ –¥–∞—Ç–æ—é –Ω–∞—Ä–æ–¥–∂–µ–Ω–Ω—è (birthday).

    Returns:
        list: –°–ø–∏—Å–æ–∫ —Å–ª–æ–≤–Ω–∏–∫—ñ–≤ –∑ —ñ–º–µ–Ω–µ–º —Ç–∞ –¥–∞—Ç–æ—é –ø—Ä–∏–≤—ñ—Ç–∞–Ω–Ω—è.
    """
    today = datetime.today().date()
    upcoming_birthdays = []

    for user in users:
        birthday = datetime.strptime(user["birthday"], "%Y.%m.%d").date()
        birthday_this_year = birthday.replace(year=today.year)

        if birthday_this_year < today:
            birthday_this_year = birthday_this_year.replace(year=today.year + 1)

        delta_days = (birthday_this_year - today).days

        if 0 <= delta_days <= 7:
            congratulation_date = birthday_this_year

            if birthday_this_year.weekday() == 5:  # —Å—É–±–æ—Ç–∞
                congratulation_date += timedelta(days=2)
            elif birthday_this_year.weekday() == 6:  # –Ω–µ–¥—ñ–ª—è
                congratulation_date += timedelta(days=1)

            upcoming_birthdays.append({
                "name": user["name"],
                "congratulation_date": congratulation_date.strftime("%Y.%m.%d")
            })

    return upcoming_birthdays

# –ü—Ä–∏–∫–ª–∞–¥ —Å–ø–∏—Å–∫—É –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ–≤:
users = [
    {"name": "John Doe", "birthday": "1985.03.14"},
    {"name": "Jane Smith", "birthday": "1990.03.10"},
    {"name": "Emily White", "birthday": "1989.03.14"},
    {"name": "Mike Brown", "birthday": "1988.01.30"}
]

# –í–∏–∫–æ—Ä–∏—Å—Ç–∞–Ω–Ω—è —Ñ—É–Ω–∫—Ü—ñ—ó:
upcoming_birthdays = get_upcoming_birthdays(users)
print("–°–ø–∏—Å–æ–∫ –ø—Ä–∏–≤—ñ—Ç–∞–Ω—å –Ω–∞ —Ü—å–æ–º—É —Ç–∏–∂–Ω—ñ:", upcoming_birthdays)

